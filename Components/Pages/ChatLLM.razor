@page "/"
@rendermode InteractiveServer
@using MaIN.Core.Hub
@using MaIN.Core.Hub.Contexts
@using System.Text.Json
@using System.IO
@inject IConfiguration Configuration

<h3>Chat with LLM</h3>

<div class="mb-3">
    <label>Wybierz model GGUF:</label>
    <select class="form-control" @bind="modelName" disabled="@isLoading">
        @foreach (var model in availableModels)
        {
            var displayName = Path.GetFileNameWithoutExtension(model);
            <option value="@displayName">@displayName</option>
        }
    </select>
    @if (!string.IsNullOrEmpty(modelError))
    {
        <div style="color:red">@modelError</div>
    }
</div>

<div class="border rounded p-3 mb-3 bg-light">
    @foreach (var message in chatHistory)
    {
        <div class="mb-3 p-2 rounded @(message.IsUser ? "bg-primary text-white ms-5" : "bg-light me-5")">
            <strong>@(message.IsUser ? "You" : (message.ModelName ?? "LLM chat")+":")</strong>
            <p class="mb-0 mt-2">
                @message.Content
                @if (!message.IsUser && message.GenerationTimeSeconds.HasValue)
                {
                    <span class="badge bg-secondary ms-2">⏱ @message.GenerationTimeSeconds.Value.ToString("F2")s</span>
                }
            </p>
        </div>
    }
</div>

<div class="d-flex gap-2">
    <input type="text" class="form-control"
           @bind="messageToLLM"
           @bind:event="oninput"
           @onkeydown="HandleKeyDown"
           placeholder="Type your message..." />
    <button class="btn btn-primary"
            @onclick="SendMessage"
            disabled="@isLoading"
            style="background-color:@(isLoading ? "#444" : "")">
        Send
    </button>
</div>

@code {
    string messageToLLM = "";
    bool isLoading = false;
    List<ChatMessage> chatHistory = new();
    private ChatContext? chatInstance;
    string modelName = "";
    string modelError = "";
    string lastModelName = "";
    List<string> availableModels = new();
    string modelsPath = "";
    string modelPath = "";

    private class ChatMessage
    {
        public string Content { get; set; } = "";
        public bool IsUser { get; set; }
        public double? GenerationTimeSeconds { get; set; }
        public string? ModelName { get; set; }
    }

    protected override void OnInitialized()
    {
        // Pobierz ModelsPath z konfiguracji
        modelsPath = Configuration["MaIN:ModelsPath"] ?? "/home/pi/models";
        if (Directory.Exists(modelsPath))
        {
            availableModels = Directory.GetFiles(modelsPath, "*.gguf")
                .Select(Path.GetFileName)
                .Where(x => x is not null)
                .Cast<string>()
                .ToList();
            if (availableModels.Count > 0)
            {
                modelName = Path.GetFileNameWithoutExtension(availableModels[0]);
                modelPath = Path.Combine(modelsPath, availableModels[0]);
            }
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(messageToLLM))
            return;

        isLoading = true;
        StateHasChanged();

        chatHistory.Add(new ChatMessage { Content = messageToLLM, IsUser = true });
        var userMessage = messageToLLM;
        messageToLLM = "";

        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        try
        {
            modelError = "";
            if (chatInstance == null || lastModelName != modelName)
            {
                try
                {
                    // Znajdź pełną ścieżkę do wybranego modelu
                    var selectedModelFile = availableModels.FirstOrDefault(m => Path.GetFileNameWithoutExtension(m) == modelName);
                    if (selectedModelFile == null)
                    {
                        modelError = "Błąd: Nie znaleziono pliku modelu!";
                        isLoading = false;
                        StateHasChanged();
                        return;
                    }
                    modelPath = Path.GetFullPath(Path.Combine(modelsPath, selectedModelFile));
                    chatInstance = AIHub.Chat().WithCustomModel(modelName, modelPath);
                    lastModelName = modelName;
                }
                catch
                {
                    modelError = "Błąd: Nie znaleziono modelu lub zła nazwa!";
                    isLoading = false;
                    StateHasChanged();
                    return;
                }
            }

            var result = await chatInstance
                .WithMessage(userMessage)
                .CompleteAsync();

            stopwatch.Stop();
            chatHistory.Add(new ChatMessage {
                Content = result.Message.Content,
                IsUser = false,
                GenerationTimeSeconds = stopwatch.Elapsed.TotalSeconds,
                ModelName = modelName
            });
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            chatHistory.Add(new ChatMessage { Content = $"Error: {ex.Message}", IsUser = false });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
} 